Created: 26.11.2023 06:34:48
Model version: cnn_v1_16
Path: saved_models/cnn/cnn_v1_16.pth
Run name: None
Accuracy: 0.477788344680632

Hyperparameters:
Optimizer: SGD
Momentum: 0.193
Learning rate: 0.001
Weight decay: 0
Used CosineAnnealingLR scheduler with T_max 0.715
Used CrossEntropyLoss with label smoothing 0.0466
Balanced classes
Data normalized: True
Train batch size: 64
Validation batch size: 5


--------------------------Script of the model can be seen below.---------------------------
import torch
import torch.nn as nn
import torch.nn.functional as F
import os

current_file_name = os.path.basename(__file__)
model_version=current_file_name.split('.')[0]

class cnn(nn.Module):
    def __init__(self):
        super(cnn, self).__init__()
        # YOUR CODE HERE
        self.dropout=nn.Dropout(0.3)
        self.m = nn.MaxPool1d(2, stride=2)
        self.conv1 = nn.Conv2d(21, 6, (4,1))
        self.norm1=nn.BatchNorm1d(6)
        self.conv2 = nn.Conv1d(6, 12, 3)
        self.conv1_2 = nn.Conv2d(21, 12, (4,33))
        self.norm3=nn.BatchNorm1d(384)
        self.fc1=nn.Linear(384,200)
        self.norm4=nn.BatchNorm1d(200)
        self.fc2=nn.Linear(200,120)
        self.norm5=nn.BatchNorm1d(120)
        self.fc3=nn.Linear(120,8)
        

    def forward(self, x):
        """
        Args:
          x of shape (batch_size, 21, 4, 33): Input images.
        
        Returns:
          y of shape (batch_size, 10): Outputs of the network.
        """
        y=self.conv1(x)
        y=self.dropout(y)
        y=F.relu(y) # (batch_size, 6, 1, 33)
        y=y.squeeze(dim=2) # (batch_size, 6, 33)
        y=self.norm1(y)
        
        y=self.conv2(y)
        y=self.dropout(y)
        y=F.relu(y) # (batch_size, 12, 31)
        
        y2=self.conv1_2(x)
        y2=self.dropout(y2)
        y2=F.relu(y2).squeeze(dim=2) # (batch_size, 21, 4, 33) -> (batch_size, 12, 1)
        y=torch.cat((y,y2), dim=2) # (batch_size, 12, 32)
        
        y = y.view(-1, self.num_flat_features(y)) # (batch_size, 384)
        y=self.norm3(y)
        
        y=self.fc1(y)
        y=self.dropout(y)
        y=F.relu(y) # (batch_size, 200)
        y=self.norm4(y)
        
        y=self.fc2(y)
        y=self.dropout(y)
        y=F.relu(y) # (batch_size, 120)
        y=self.norm5(y)
        
        y=self.fc3(y) # (batch_size, 8)
        return y
    
    def num_flat_features(self, x):
        size = x.size()[1:]  # all dimensions except the batch dimension
        num_features = 1
        for s in size:
            num_features *= s
        return num_features
-------------------------------------------------------------------------------------------



------------------------------Created input matrices with script:------------------------------
import numpy as np
import torch
from torch.utils.data import Dataset

class FeatureDataset(Dataset):
    def __init__(self, data, labels):
        '''
        Args:
        info_dir (string/pandas Dataframe): Path to excel file(or the file itself), that contains clinical info about PET images
        seed (int): seed for sampling images
        norm_mean_std (str): string that indicates the means and stds for normalization
        prob_gaussian (float): Probability for blurring images
        simple_transformation (bool): Whether to use minimal transformations
        
        Outputs:
        image (torch.Tensor): Image as torch Tensor. Shape (1,3,512,512)
        label (torch.Tensor): Label indicating if there is cancer in the picture. 1=Cancer, 0=Benign 
        '''
        self.data_tensor=data
        self.labels=labels

    def __len__(self):
        return self.data_tensor.shape[0] 
    
    def __getitem__(self, idx):
        #load images
        tensor = self.data_tensor[idx,:,:,:]
        #load labels 
        label = self.labels[idx]
        
        return tensor, label
    
    
def get_norm_values(file):
    numbers=dict()
    previous_id=None
    with open(file, 'r') as fr:
        for line in fr:
            if line.startswith('#'):
                if line.startswith("#ID:"):
                        if line.strip()!=previous_id:
                            previous_id=line.strip()
                            channel=0
                        else:
                            channel+=1
                continue
            if not channel in numbers:
                numbers[channel]=list()
            numbers[channel] += [float(number) for number in line.strip().split(',')]
    mins=dict()
    maxes=dict()
    for channel in numbers:
        mins[channel]=min(numbers[channel])
        maxes[channel]=max(numbers[channel])
    return mins, maxes


def parse_matrices(file, classes, norm):
    if norm:
        mins, maxes = get_norm_values(file)
    bases={'A': 0, 'C': 1, 'G': 2, 'T': 3}
    row=0
    df_target=np.empty((1,1,1))
    first_2d=True
    first_3d=True
    first_4d_input=True
    first_df_input=True
    new_sampleid=True
    previous_id=None
    single_class=list()
    target=list()
    row_list=list()
    with open(file, 'r') as fr:
        for line in fr:
            if line.startswith('#'):
                if line.startswith("#ID:"):
                    if previous_id==None:
                        previous_id=line.strip()
                        channel=0
                        continue
                    if first_4d_input:
                        temp_4d=temp_3d
                        first_4d_input=False
                    else:
                        temp_4d=np.concatenate((temp_4d, temp_3d), axis=1)
                    first_3d=True
                    if line.strip()!=previous_id:
                        new_sampleid=True
                        channel=0
                        if first_df_input:
                            df_input=temp_4d
                            first_df_input=False
                        else:
                            df_input=np.concatenate((df_input, temp_4d), axis=0)
                        first_4d_input=True
                        previous_id=line.strip()
                    else:
                        channel+=1
                elif line.startswith('#REF:'):
                    ref=line[6]
                elif line.startswith('#ALT:') and new_sampleid:
                    alt=line[6]
                    target.append(torch.tensor(classes[ref+alt]))
                    new_sampleid=False
                continue
            if norm:
                numbers = [(float(number)-mins[channel])/(maxes[channel]-mins[channel]) for number in line.strip().split(',')]
            else:
                numbers= [float(number) for number in line.strip().split(',')]
            row_in_array=np.array(numbers).reshape(1,1,1,-1)
            if first_2d:
                temp_2d=row_in_array
                first_2d=False
            else:
                temp_2d=np.concatenate((temp_2d, row_in_array), axis=2)
            row+=1
            if row==4:
                if first_3d:
                    temp_3d=temp_2d
                    first_3d=False
                else:
                    temp_3d=np.concatenate((temp_3d, temp_2d), axis=1)
                first_2d=True
                row=0
    if not first_3d:
        if first_4d_input:
            temp_4d=temp_3d
        else:
            temp_4d=np.concatenate((temp_4d, temp_3d), axis=1)
        df_input=np.concatenate((df_input, temp_4d), axis=0)
    return torch.Tensor(df_input), torch.tensor(target,dtype=torch.long)
    
    
if __name__=='__main__':
    raise RuntimeError()
-------------------------------------------------------------------------------------------



------------------------------Computed accuracies with script:-----------------------------
import torch

def count_f_scores(tp,fp,tn,fn):
    if (tp+fp)==0:
        precision=0
    else:
        precision=tp/(tp+fp)
    if tp+fn==0:
        recall=0
    else:
        recall=tp/(tp+fn)
    if precision==0 and recall==0:
        f1=f2=0
    else:
        f1=2*(precision*recall)/(precision+recall)
        f2=5*(precision*recall)/(4*precision+recall)
    return f1, f2, precision, recall

def count_pred_types(ftp, ftn, tp,fp,tn,fn, labels, predicted):
    for label, prediction in zip(labels, predicted):
        if label in [1,7]:
            if label==prediction:
                tn+=1
            else:
                fp+=1
                if prediction in [1,7]:
                    ftn+=1
        else:
            if label==prediction:
                tp+=1
            else:
                fn+=1
                if prediction not in [1,7]:
                    ftp+=1
    return tp,fp,tn,fn,ftn, ftp

def compute_accuracy(device, net, dataloader, criterion, datatype, verbose, cv):
    net.eval()
    correct = 0
    tp=fp=tn=fn=ftn=ftp=0
    number_of_classes=8
    correct_per_class=[0 for i in range(number_of_classes)]
    total_per_class=[0 for i in range(number_of_classes)]
    with torch.no_grad():
        tot_loss=0
        tot_items=0
        for sequences, labels in dataloader:
            sequences, labels = sequences.to(device), labels.to(device)
            result = net(sequences)
            if isinstance(result, tuple): #RNN case returns also hidden state
                outputs, _ = result
            else:
                outputs = result
            _, predicted = torch.max(outputs.data, 1)
            for label, prediction in zip(labels, predicted):
                correct_per_class[int(label.item())]+=(label.item()==prediction.item())
                total_per_class[int(label.item())]+=1
            if cv or verbose:
                tot_items+=len(labels)
            if cv:
                tot_loss+=criterion(outputs,labels).item()
            if verbose:
                tp,fp,tn,fn, ftn, ftp = count_pred_types(ftp, ftn, tp,fp,tn,fn, labels, predicted)
        if cv:
            tot_loss/=tot_items
        for i in range(number_of_classes):
            correct+=(correct_per_class[i]/total_per_class[i])/number_of_classes
        if verbose:
            f1, f2, precision, recall = count_f_scores(tp,fp,tn,fn)
            f1_fake, f2_fake, fake_precision, fake_recall = count_f_scores((tp+ftp),(fp-ftn),(tn+ftn),(fn-ftp))
            tn_tnfp=tn/(tn+fp) if tn+fp>0 else 0
            fake_tpftp_tpftpfn=(tp+ftp)/(tp+ftp+fn) if (tp+ftp+fn)>0 else 0
            fake_tnftn_tnftnfp=(tn+ftn)/(tn+ftn+fp) if (tn+ftn+fp)>0 else 0
            print('\n',datatype)
            print("TP:",tp,". FN:",fn, "TP/(TP+FN):",recall,"TN:",tn,"FP:",fp,"TN/(TN+FP):",tn_tnfp,
                  "Wrong positive class predicted:",ftp, "Wrong negative class predicted:",ftn)
            print("Fake F1-score:",f1_fake,". Fake F2-score:",f2_fake)
            print("Fake TP/(TP+FN):",fake_tpftp_tpftpfn,"Fake TN/(TN+FP)",fake_tnftn_tnftnfp)
            print("Fake precision:",fake_precision,"Fake recall:",fake_recall)
            print("F1-score:",f1)
            print("F2-score:",f2)
            print("Precision:",precision)
            print("Recall:",recall)
            print("Fake accuracy:",(tn+ftn+tp+ftp)/tot_items)

    return correct, tot_loss
-------------------------------------------------------------------------------------------
