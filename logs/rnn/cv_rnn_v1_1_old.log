Created: 05.04.2023 02:06:02
Model version: rnn_v1_1
Path: saved_models/rnn_v1_1.pth
Run name: None
Accuracy: 0.4243847178025481

Fold 1: 0.42520437152077106.
Fold 2: 0.4405958075985824.
Fold 3: 0.405604979386255.
Fold 4: 0.43412642989069355.
Fold 5: 0.41639200061643855.

Hyperparameters:
Optimizer: Adam
Learning rate: 0.0001
Weight decay: 0.0001
Used CrossEntropyLoss with label smoothing 0.0108
Balanced classes
Bidirectional: False
Hidden dimension: 72
Number of layers: 1
Train batch size: 128
Validation batch size: 5


--------------------------Script of the model can be seen below.---------------------------
import torch
import torch.nn as nn
import torch.nn.functional as F

class rnn(nn.Module):
    def __init__(self, many_classes, bidirectional, hidden_dim, n_layers):
        super(rnn, self).__init__()
        # YOUR CODE HERE
        input_size=84
        output_size=8
        self.norm0=nn.BatchNorm2d(1)
        self.bidirectional=bidirectional #True
        self.hidden_dim=hidden_dim #35
        self.n_layers = n_layers
        fc_input=33*(int(self.bidirectional)+1)*self.hidden_dim
        self.rnn = nn.RNN(input_size, self.hidden_dim, self.n_layers, batch_first=True, bidirectional=self.bidirectional)
        self.fc = nn.Linear(fc_input, output_size)

    def forward(self, x):
        """
        Args:
          x of shape (batch_size, 1, length (33), height (84)): Input sequences.
        
        Returns:
          y of shape (batch_size, 8): Outputs of the network.
        """
        x=torch.squeeze(x) #(batch_size,L,H)
        batch_size = x.size(0)
        hidden = self.init_hidden(batch_size)
        out, hidden = self.rnn(x, hidden) #(N,L,Dâˆ—hidden_dim), where D = 2 if bidirectional=True otherwise 1
        #out = out.contiguous().view(-1, self.hidden_dim)
        out = out.contiguous().view(-1, self.num_flat_features(out)) #(N, L*D*hidden_dim)
        out = self.fc(out)
        return out, hidden
    

    
    def init_hidden(self, batch_size):
        # This method generates the first hidden state of zeros which we'll use in the forward pass
        # We'll send the tensor holding the hidden state to the device we specified earlier as well
        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        hidden = torch.zeros((int(self.bidirectional)+1)*self.n_layers, batch_size, self.hidden_dim, device=device)
        return hidden
    
    def num_flat_features(self, x):
        size = x.size()[1:]  # all dimensions except the batch dimension
        num_features = 1
        for s in size:
            num_features *= s
        return num_features
-------------------------------------------------------------------------------------------



------------------------------Created input matrices with script:------------------------------
import numpy as np
import torch
import statistics

def get_norm_values(file):
    numbers=dict()
    previous_id=None
    with open(file, 'r') as fr:
        for line in fr:
            if line.startswith('#'):
                if line.startswith("#ID:"):
                        if line.strip()!=previous_id:
                            previous_id=line.strip()
                            channel=0
                        else:
                            channel+=1
                continue
            if not channel in numbers:
                numbers[channel]=list()
            numbers[channel] += [float(number) for number in line.strip().split(',')]
    mins=dict()
    maxes=dict()
    for channel in numbers:
        mins[channel]=min(numbers[channel])
        maxes[channel]=max(numbers[channel])
    return mins, maxes


def parse_matrices(file, many_classes, classes):
    mins, maxes = get_norm_values(file)
    bases={'A': 0, 'C': 1, 'G': 2, 'T': 3}
    #classes={'AA': 0, 'AC': 1, 'AG': 2, 'AT': 3, 'CA': 4, 'CC': 5, 'CG': 6, 'CT': 7, 'GA':8, 'GC': 9, 'GG': 10,
    #        'GT': 11, 'TA': 12, 'TC': 13, 'TG': 14, 'TT': 15}
    #classes={'A': 0, 'C': 1, 'G': 2, 'T': 3, 'N':4}
    #classes={'altA': 0, 'altC': 1, 'altG': 2, 'altT': 3, 'refA': 4, 'refC': 5, 'refG': 6, 'refT': 7}
    row=0
    #temp_3d=np.empty((1,1,1))
    df_target=np.empty((1,1,1))
    first_row_of_sample=True
    first_sample=True
    df_input=None
    new_sampleid=True
    previous_id=None
    single_class=list()
    target=list()
    row_list=list()
    same_summa=0
    with open(file, 'r') as fr:
        for line in fr:
            if line.startswith('#'):
                if line.startswith("#ID:"):
                    if previous_id==None:
                        previous_id=line.strip()
                        channel=0
                        continue
                    elif line.strip()!=previous_id:
                        new_sampleid=True
                        channel=0
                        if first_sample:
                            df_input=temp_2d
                            first_sample=False
                        else:
                            df_input=np.concatenate((df_input, temp_2d), axis=0)
                        first_row_of_sample=True
                        previous_id=line.strip()
                    else:
                        channel+=1
                if new_sampleid:
                    if many_classes:
                        if line.startswith('#REF:'):
                            ref=line[6]
                        elif line.startswith('#ALT:'):
                            alt=line[6]
                            target.append(torch.tensor(classes[ref+alt]))
                            new_sampleid=False
                    else:
                        if "CLASS: random" in line:
                            new_sampleid=False
                            if many_classes:
                                target.append(torch.tensor(0))
                            else:
                                type="neg"
                        elif ("#CLASS: train" in line) or ("#CLASS: predict" in line):
                            new_sampleid=False
                            if many_classes:
                                target.append(torch.tensor(1))
                            else:
                                type="pos"
                continue
            numbers = [(float(number)-mins[channel])/(maxes[channel]-mins[channel]) for number in line.strip().split(',')]
            row_in_array=np.array(numbers).reshape(1,1,-1,1)
            if first_row_of_sample:
                temp_2d=row_in_array
                first_row_of_sample=False
            else:
                temp_2d=np.concatenate((temp_2d, row_in_array), axis=3)

    if not first_row_of_sample:
        df_input=np.concatenate((df_input, temp_2d), axis=0)
    if many_classes:
        return torch.Tensor(df_input), torch.tensor(target,dtype=torch.long)
    else:
        return torch.Tensor(df_input), torch.tensor(target,dtype=torch.float)
    
    
if __name__=='__main__':
    raise RuntimeError()
-------------------------------------------------------------------------------------------



------------------------------Computed accuracies with script:-----------------------------
import torch

def count_f_scores(tp,fp,tn,fn):
    if (tp+fp)==0:
        precision=0
    else:
        precision=tp/(tp+fp)
    if tp+fn==0:
        recall=0
    else:
        recall=tp/(tp+fn)
    if precision==0 and recall==0:
        f1=f2=0
    else:
        f1=2*(precision*recall)/(precision+recall)
        f2=5*(precision*recall)/(4*precision+recall)
    return f1, f2, precision, recall

def count_pred_types(ftp, ftn, tp,fp,tn,fn, labels, predicted, sequences):
    for label, prediction, sequence in zip(labels, predicted, sequences):
        #if label in [0,5,10,15]:
        #if label==4:
        if label in [1,7]:
        #if label in [4,5,6,7]:
            if label==prediction:
                tn+=1
            else:
                fp+=1
                #if prediction in [0,5,10,15]:
                if prediction in [1,7]:
                #if prediction in [4,5,6,7]:
                #if prediction==4:
                    ftn+=1
        else:
            if label==prediction:
                tp+=1
            else:
                fn+=1
                #if prediction!=4:
                #if prediction not in [0,5,10,15]:
                if prediction not in [1,7]:
                #if not prediction in [4,5,6,7]:
                    #for i in range(4):
                    #    if sequence[0, i,16]==1:
                    #        ref=i
                    #if prediction!=i:
                     #   ftn+=1
                    ftp+=1
    return tp,fp,tn,fn,ftn, ftp

def compute_accuracy(device, net, dataloader, criterion, many_classes, datatype, verbose):
    net.eval()
    correct = 0
    total = 0
    tp=fp=tn=fn=ftn=ftp=0
    number_of_classes=8
    correct_separated=[0 for i in range(number_of_classes)]
    correct_totals=[0 for i in range(number_of_classes)]
    with torch.no_grad():
        #tot_loss=0
        #tot_items=0
        for sequences, labels in dataloader:
            sequences, labels = sequences.to(device), labels.to(device)
            outputs, hidden = net(sequences)
            if not many_classes:
                outputs=outputs.squeeze()
                predicted = torch.round(outputs.data)
            else:
                _, predicted = torch.max(outputs.data, 1)
            for label, prediction in zip(labels, predicted):
                correct_separated[label]+=(label==prediction).item()
                correct_totals[label]+=1
            #tot_loss+=criterion(outputs,labels).item()
            #tot_items+=len(labels)
            #tp,fp,tn,fn, ftn, ftp = count_pred_types(ftp, ftn, tp,fp,tn,fn, labels, predicted, sequences)
        #tot_loss/=tot_items
        for i in range(number_of_classes):
            correct+=(correct_separated[i]/correct_totals[i])/number_of_classes
        #f1, f2, precision, recall = count_f_scores(tp,fp,tn,fn)
        #f1_fake, f2_fake, fake_precision, fake_recall = count_f_scores((tp+ftp),(fp-ftn),(tn+ftn),(fn-ftp))
        if verbose:
            print('\n',datatype)
            print("TP:",tp,". FN:",fn, "TP/(TP+FN):",tp/(tp+fn),"TN:",tn,"FP:",fp,"TN/(TN+FP):",tn/(tn+fp),
                  "Wrong positive class predicted:",ftp, "Wrong negative class predicted:",ftn)
            print("Fake F1-score:",f1_fake,". Fake F2-score:",f2_fake)
            print("Fake TP/(TP+FN):",(tp+ftp)/(tp+ftp+fn),"Fake TN/(TN+FP)",(tn+ftn)/(tn+ftn+fp))
            print("Fake precision:",fake_precision,"Fake recall:",fake_recall)
    #return correct / total, tot_loss, f1, f2
    return correct#, tot_loss, f1, f2, precision, recall, f1_fake, f2_fake, fake_precision, fake_recall
-------------------------------------------------------------------------------------------
